buildscript {
    ext {
        springBootVersion = '2.1.6.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url 'https://repo.spring.io/libs-snapshot'
        }
        maven {
            url 'https://repo.spring.io/release'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'project-report'
apply plugin: 'idea'

group = 'me.sample'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    jhipsterVersion = '3.0.5'
    dropwizardVersion = '4.1.0'
    micrometerVersion = '1.2.1'
    sqlBuilderVersion = "1.2"
    vavrVersion = "0.10.2"
    jakartaPersistenceVersion = "2.2.2"
    jakartaAnnotationApiVersion = "1.3.4"
    jwtVersion = "0.10.6"
    springCloudVersion = "Greenwich.RELEASE"
    springSecurityWeb = "5.0.1.RELEASE"
    springSecurityJwt = "1.0.9.RELEASE"
    springSecurityOauth2 = "2.3.2.RELEASE"
    hibernateVersion = "5.2.13.Final"
    hibernateTypes52Version = "2.5.0"
    logbackClassicVersion = "1.1.8"
    postgresqlVersion = "42.2.1"
    postgresSocketFactory = "1.0.5"
    liquibaseVersion = "3.5.5"
    swaggerVersion = "2.9.2"
    swaggerCodegenVersion = "2.3.1"
    lombokVersion = "1.18.6"
    mapstructVersion = "1.3.1.Final"
    guavaVersion = "27.1-jre"
    jaxbVersion = "2.3.0"
    h2Version = "1.4.196"
    commonsLangVersion = "3.9"
    streamExVersion = "0.6.8"
    validationAPIVersion = "2.0.1.Final"
    hibernateValidatorVersion = "6.0.9.Final"
    turoPushyVersion = "0.13.3"
    javaxAnnotationAPIVersion = "1.3.2"
    zalandoProblemVersion = "0.21.0"
    zalandoProblemSpringWebVersion = "0.24.0-RC.0"
    jibVersion = "1.1.0"
    firebaseAdminSdkVersion = "6.8.0"
    mockitoVersion = "2.27.0"
    junitVersion = "5.5.0-M1"
}

repositories {
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

bootRun {
    args = []
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring',
            '-parameters'
    ]
}

apply from: 'gradle/docker.gradle'


dependencies {

    compile("org.springframework.cloud:spring-cloud-starter")
    compile("org.springframework.cloud:spring-cloud-starter-config")
    compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
    compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
    compile("org.springframework.cloud:spring-cloud-starter-stream-rabbit")

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-quartz"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-configuration-processor"
    compile "org.springframework.retry:spring-retry"


    compile "io.github.jhipster:jhipster-framework:${jhipsterVersion}"

    compile("org.yaml:snakeyaml:1.23")

    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    compile "javax.validation:validation-api:${validationAPIVersion}"
    compile "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"

    compile "com.vladmihalcea:hibernate-types-52:${hibernateTypes52Version}"
    compile "one.util:streamex:${streamExVersion}"

    compile "io.dropwizard.metrics:metrics-core:${dropwizardVersion}"
    compile "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"

    compile "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    runtime "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    runtime "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"

    compile("ch.qos.logback:logback-classic:${logbackClassicVersion}")
    compile("ch.qos.logback:logback-core:${logbackClassicVersion}")

    runtime("org.postgresql:postgresql:${postgresqlVersion}")
    compile("com.google.cloud.sql:postgres-socket-factory:${postgresSocketFactory}") {
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    compile("org.liquibase:liquibase-core")
    compile("com.github.ben-manes.caffeine:caffeine")

    compile("io.springfox:springfox-swagger2:${swaggerVersion}")
    compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
    compile("io.springfox:springfox-bean-validators:${swaggerVersion}")

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    compile("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
    compile("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    compile "ca.krasnay:sqlbuilder:${sqlBuilderVersion}"

    compile "io.vavr:vavr:${vavrVersion}"

    compile("com.google.guava:guava:${guavaVersion}")
    compile("javax.xml.bind:jaxb-api:${jaxbVersion}")

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    compile("org.apache.commons:commons-lang3:${commonsLangVersion}")

    compile("org.apache.poi:poi:4.1.2")
    compile("org.apache.poi:poi-ooxml:4.1.2")

    // push clients
    compile("com.eatthepath:pushy:0.14.2")
    compile("com.google.firebase:firebase-admin:${firebaseAdminSdkVersion}")

    compile("javax.annotation:javax.annotation-api:${javaxAnnotationAPIVersion}")

    compile("org.zalando:problem:${zalandoProblemVersion}")
    compile("org.zalando:problem-spring-web:${zalandoProblemSpringWebVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.security:spring-security-test")
    testCompile("org.mockito:mockito-core:${mockitoVersion}")
    testCompile("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testCompile("org.junit.jupiter:junit-jupiter:${junitVersion}")
    testCompile("org.junit.jupiter:junit-jupiter:${junitVersion}")
    testCompile 'io.rest-assured:rest-assured:3.3.0'

    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
}


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
